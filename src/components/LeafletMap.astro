---
import "leaflet/dist/leaflet.css"

export interface Props {
  latitude: number
  longitude: number
  zoom: number
  /** URL del tileLayer, ver: https://leafletjs.com/reference.html#tilelayer */
  tileLayer: string
  /** Atribución requerida por la mayoría de tile servers */
  attribution: string
}

const { latitude, longitude, zoom, container, tileLayer, attribution } = Astro.props
---

<leaflet-map
  class="block h-full"
  data-latitude={latitude}
  data-longitude={longitude}
  data-zoom={zoom}
  data-container={container}
  data-tiles={tileLayer}
  data-attribution={attribution}
>
</leaflet-map>

<script>
  import L from "leaflet"

  class LeafletMap extends HTMLElement {
    connectedCallback() {
      const { latitude, longitude, zoom, tiles, attribution } = this.dataset
      const latlng = [Number(latitude), Number(longitude)]

      const map = L.map(this, {
        scrollWheelZoom: false,
        dragging: false,
      }).setView(latlng, Number(zoom))

      // Habilitar interactividad al hacer clic
      map.once("click", () => {
        map.scrollWheelZoom.enable()
        map.dragging.enable()
      })

      L.tileLayer(tiles, { attribution }).addTo(map)

      // Definir icono personalizado
      const myIcon = L.icon({
        iconUrl: "images/icons/marker.png",
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41],
      })

      L.marker(latlng, { icon: myIcon }).addTo(map).bindPopup("Aquopolis Villanueva de la Cañada")
    }
  }

  window.customElements.define("leaflet-map", LeafletMap)
</script>

<style is:global>
  .leaflet-tile {
    filter: hue-rotate(220deg);
  }
</style>
